import userModel from "../models/userModel.js";
import bcrypt from "bcrypt";
import jwt from "jsonwebtoken";
import validator from "validator";



// login user
const loginUser = async (req, res) => {
    const {email,password} = req.body;
    try{
        const user = await userModel.findOne({email});
        // checking if user exists or not
      
        if(!user){
            return res.json({success:false,message:"User does not exist"});
        }
        const isMatch = await bcrypt.compare(password, user.password); // comparing password entered by user and hashed password in db
        // checking if passwrd is matching or not
        if(!isMatch){
            return res.json({success:false,message:"Invalid credentials"});
        }
        const token = createToken(user._id); // creating token for user
        res.json({success:true,token}); // sending token as a response to frontend
    }
    // if any error occurs while running above code then it will be caught in catch block
    catch(error){
        console.log(error);
        res.json({success:false,message:"Error in logging in user"})
    }



}

// generating token
// this function is used to generate token for user authentication AND ID is that self generated by mongo db
const createToken= (id)=> {
    return jwt.sign({id},process.env.JWT_SECRET)
}

// register user
const registerUser = async (req, res) => {
    const {name,password,email} = req.body;
    try{
        // checking if user already exists
        const exists = await userModel.findOne({email});
        if(exists){
            return res.json({success:false,message:"User already exists"});
        }
        // validating email format and strong paswrd
        if(!validator.isEmail(email)){
            return res.json({success:false,message:"Please enter valid email"})
        }
        if(password.length<8){
            return res.json({success:false,message:"Please enter strong password"})
        }
        // hashing password using bcrypt
        const salt = await bcrypt.genSalt(10);// using 1-10 numbers for hashing password
        const hashedPassword = await bcrypt.hash(password, salt);// password is user entered password and salt is the hashed password

        // creating new user
        const newUser = new userModel({
            // passwrd is from userModel and in place of passwrd storing hashed passwrd
            name:name,
            email:email,
            password:hashedPassword
        })

        const user = await newUser.save(); // saving user in db 

        const token = createToken(user._id); // creating token for user
        res.json({success:true,token}) // sending response to frontend

    }catch(error){
        console.log(error);
        res.json({success:false,message:"Error in registering user"})
    }
}
// export {registerUser,createToken} exporting registerUser and createToken functions
export {loginUser,registerUser}; // exporting loginUser function